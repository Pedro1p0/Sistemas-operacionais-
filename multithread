import threading
from time import sleep
import os



def primeira_tarefa(): #simulação do mapeamento direto 
    os.system(f'''cache-simulator --cache-size 64 --num-blocks-per-set 1 --num-words-per-block 4 --word-addrs 3 180 43 2 191 88 190 14 181 44 186 253''')

def segunda_tarefa(): #simulação mapeamento totalmente associativo 
    os.system('cache-simulator --cache-size 64 --num-blocks-per-set 4 --num-words-per-block 4 --word-addrs 0 8 0 6 8')

def terceira_tarefa(): #simulação com mapeamento associativo de 2 vias

    os.system('cache-simulator --cache-size 4 --num-blocks-per-set 2 --num-words-per-block 1 --word-addrs 0 8 0 6 8')

def quarta_tarefa(): #simulação com mapeamento associativo de 4 vias

    os.system('cache-simulator --cache-size 64 --num-blocks-per-set 4 --num-words-per-block 1 --word-addrs 0 8 0 6 8')

def quinta_tarefa(): # simulação com mapeamento assosiativo de 8 vias

    os.system('cache-simulator --cache-size 64 --num-blocks-per-set 8 --num-words-per-block 1 --word-addrs 0 8 0 6 8')

def sexta_tarefa(): # simulação com mapeamento assosiativo de 16 vias
    os.system('cache-simulator --cache-size 64 --num-blocks-per-set 16 --num-words-per-block 1 --word-addrs 0 8 0 6 8')

#Consideramos a main() o código abaixo
def main():

    thread1 = threading.Thread(target = primeira_tarefa)
    thread1.start()
    thread2 = threading.Thread(target = segunda_tarefa)
    thread2.start()
    thread3 = threading.Thread(target = terceira_tarefa)
    thread3.start()
    thread4 = threading.Thread(target = quarta_tarefa)
    thread4.start()
    thread5 = threading.Thread(target = quinta_tarefa)
    thread5.start()
    thread6 = threading.Thread(target = sexta_tarefa)
    thread6.start()
# OS RESULTADOS SERIAM EXIBIDOS APÓS A CONCLUSÃO DAS 4 Threads 

    thread1.join()
    thread2.join()
    thread3.join()
    thread4.join()
    thread5.join()
    thread6.join()
    print('terminou ')

main()
